{
	"name": "MX03_MEDIUM_TABLES",
	"properties": {
		"activities": [
			{
				"name": "Set extraction timestamp",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "extractionTimestamp",
					"value": {
						"value": "@utcnow()",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Select last run information",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set timestamp for file",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@concat('select \nLAST_RUN_TIMESTAMP,\nLAST_RUN_CLOSING\nfrom SHARED.EXTR_LAST_RUN_INFO\nWHERE JOB_NAME = ''',pipeline().Pipeline,'''')",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "EXTR_LAST_RUN_INFO"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "set last run timestamp",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Select last run information",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "lastRunTimestamp",
					"value": {
						"value": "@if(\nequals(activity('Select last run information').output.value[0].LAST_RUN_TIMESTAMP,NULL)\n,NULL\n,formatDateTime(activity('Select last run information').output.value[0].LAST_RUN_TIMESTAMP,'yyyy-MM-dd HH-mm-ss'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "set last run closing",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "set last run timestamp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "lastRunClosing",
					"value": {
						"value": "@if(\nequals(activity('Select last run information').output.value[0].LAST_RUN_CLOSING,NULL)\n,NULL\n,formatDateTime(activity('Select last run information').output.value[0].LAST_RUN_CLOSING,'yyyy-MM-dd'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get Tables of the Job",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "set last run closing",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": "select OBJECT_NAME from ALL_OBJECTS WHERE OBJECT_NAME IN (\n'ALPIQ_ACT_LSWAP_REP'\n,'ALPIQ_DELTA_EXPO_REP'\n,'ALPIQ_DLT_EXP_FX_REP'\n,'ALPIQ_MTM_LSWAP_VW'\n,'ATEL_CMAT_REP'\n,'ATEL_CS_ACT_PROV_REP'\n,'ATEL_SQL_TP_REP'\n,'CS_ACTUALS_CER_REP')\nAND OWNER = 'MX_DATAMART'\nAND OBJECT_TYPE = 'TABLE'",
						"partitionOption": "None",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "MX03_MXDM_Dynamic",
						"type": "DatasetReference",
						"parameters": {
							"db_schema": "MX_DATAMART",
							"db_table": "ALL_OBJECTS"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Copy data for each table",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Tables of the Job",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@array(activity('Get Tables of the Job').output.value)",
						"type": "Expression"
					},
					"batchCount": 8,
					"activities": [
						{
							"name": "Extract data to Parquet in BLOB Storage",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "OracleSource",
									"oracleReaderQuery": {
										"value": "@concat(\n'select * from ', \nitem().OBJECT_NAME, \n' where m_ref_data in (select d.m_ref_data from DYN_AUDIT_REP d, JOB_AUDIT_REP j where d.m_idjob=j.m_mx_ref_job and d.M_DELETED  = ''N'' and j.M_STATUS in  (''Done'',''Corrected'') and  to_char(to_date(TO_CHAR (d.M_DATEGEN, ''DDMMYYYY'')|| ''_'' || TO_CHAR (d.M_TIMEGEN),''DDMMYYYY SSSSS''),''YYYY-MM-DD HH24-MI-SS'') >''',\nvariables('lastRunTimestamp'), \n''' and  to_char(to_date(TO_CHAR (d.M_DATEGEN, ''DDMMYYYY'')|| ''_''|| TO_CHAR (d.M_TIMEGEN),''DDMMYYYY SSSSS''),''YYYY-MM-DD HH24-MI-SS'') <= ''', formatDateTime(variables('extractionTimestamp'), 'yyyy-MM-dd HH-mm-ss'), ''')'\n)",
										"type": "Expression"
									},
									"partitionOption": "None",
									"queryTimeout": "02:00:00"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings",
										"maxRowsPerFile": 8000000,
										"fileNamePrefix": {
											"value": "@concat(item().OBJECT_NAME, '_', variables('fileTimestamp'),'_')",
											"type": "Expression"
										}
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "MX03_MXDM_Dynamic",
									"type": "DatasetReference",
									"parameters": {
										"db_schema": {
											"value": "@variables('dbSchema')",
											"type": "Expression"
										},
										"db_table": {
											"value": "@item().OBJECT_NAME",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DataExtraction_Parquet",
									"type": "DatasetReference",
									"parameters": {
										"folder": {
											"value": "@concat('ORACLE/',variables('dbHost'),'/',variables('dbSchema'),'/',item().OBJECT_NAME,'/',variables('folderTimestamp'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Set timestamp for folder",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set extraction timestamp",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "folderTimestamp",
					"value": {
						"value": "@formatDateTime(variables('extractionTimestamp'),'yyyy-MM-dd HH-mm-ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set timestamp for file",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set timestamp for folder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "fileTimestamp",
					"value": {
						"value": "@formatDateTime(variables('extractionTimestamp'),'yyyyMMddHHmmss')",
						"type": "Expression"
					}
				}
			}
		],
		"variables": {
			"extractionTimestamp": {
				"type": "String"
			},
			"lastRunTimestamp": {
				"type": "String"
			},
			"lastRunClosing": {
				"type": "String"
			},
			"dbSchema": {
				"type": "String",
				"defaultValue": "MX_DATAMART"
			},
			"dbHost": {
				"type": "String",
				"defaultValue": "MX03"
			},
			"folderTimestamp": {
				"type": "String"
			},
			"fileTimestamp": {
				"type": "String"
			}
		},
		"folder": {
			"name": "ERSExtractionJobTesting/MX03_Full"
		},
		"annotations": []
	}
}