{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFTutorialBulkCopyDFbanto"
		},
		"AWS_S3_Snowflake_ComplexDataTypes_secretAccessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'secretAccessKey' of 'AWS_S3_Snowflake_ComplexDataTypes'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorageDataExtraction_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageDataExtraction'"
		},
		"AzureBlobStorageMurexDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageMurexDB'"
		},
		"AzureBlobStorageMurexDBV2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorageMurexDBV2'"
		},
		"AzureFunction1_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction1'"
		},
		"AzureFunction2_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction2'"
		},
		"AzureSqlDatabaseLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedService'"
		},
		"AzureSqlDatabaseLinkedService001_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseLinkedService001'"
		},
		"AzureStorageLinkedService_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureStorageLinkedService'"
		},
		"CORPDIR2T_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CORPDIR2T'"
		},
		"ERSMetadataFunctionsAPP_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'ERSMetadataFunctionsAPP'"
		},
		"ESI13T_BUSINESSOBJECTS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ESI13T_BUSINESSOBJECTS'"
		},
		"ET51Q_BUSINESSOBJECTS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ET51Q_BUSINESSOBJECTS'"
		},
		"MX01_MX_DATAMART_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MX01_MX_DATAMART'"
		},
		"MySQLCMDBServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySQLCMDBServer'"
		},
		"Oracle1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle1'"
		},
		"AWS_S3_Snowflake_ComplexDataTypes_properties_typeProperties_accessKeyId": {
			"type": "string",
			"defaultValue": "AKIA57Z3DSAK3EIVDYI3"
		},
		"AzureFunction1_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://ersmetadataprocessingpoc.azurewebsites.net"
		},
		"AzureFunction2_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://adftests.azurewebsites.net"
		},
		"ERSMetadataFunctionsAPP_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://ersmetadataprocessingpoc.azurewebsites.net"
		},
		"Snowflake1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Snowflake1'"
		},
		"TriggerTestPipeline_properties_SourceMetadata_parameters_TableName": {
			"type": "string",
			"defaultValue": "SDKLOVVALUES"
		},
		"Trigger_73c_properties_pipeline_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"SSIS-IR_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "mydptest001.database.windows.net"
		},
		"SSIS-IR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "antonio"
		},
		"SSIS-IR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BuildSingleParquetFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CombineAvroToParquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CombineAvroFiles",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"S3Dump": {},
									"ParquetGeneralization": {
										"folder": {
											"value": "@concat('ParquetSplit/',utcnow())",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CombineAvroFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyComplexDataTypes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AvroSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "AvroWriteSettings",
									"quoteAllText": true
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MurexDB_ComplexDataTypes",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "BlobSinkComplexDataTypes",
								"type": "DatasetReference",
								"parameters": {
									"SourceSystem": "ORACLE",
									"DB_Name": "MX09",
									"Schema_Name": "MX_DATAMART",
									"Table_Name": "TST_DATA_TYPES",
									"Extraction_Timestamp": {
										"value": "@utcnow('yyyy-MM-dd HH-mm-ss')",
										"type": "Expression"
									},
									"Bucket": "tst-alpiq-datalake-bi"
								}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MurexDB_ComplexDataTypes')]",
				"[concat(variables('factoryId'), '/datasets/BlobSinkComplexDataTypes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromMurexDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBigTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "M_HOUR",
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 12
						},
						"inputs": [
							{
								"referenceName": "MurexDB_dev",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MurexDBBlobCsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MurexDB_dev')]",
				"[concat(variables('factoryId'), '/datasets/MurexDBBlobCsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromMurexDB_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBigTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "M_HOUR",
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"parallelCopies": 12
						},
						"inputs": [
							{
								"referenceName": "MurexDB_dev",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBloblDatasetV2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MurexDB_dev')]",
				"[concat(variables('factoryId'), '/datasets/AzureBloblDatasetV2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromMurexDB_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBigTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "M_HOUR",
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AvroSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "AvroWriteSettings",
									"quoteAllText": true
								}
							},
							"enableStaging": false,
							"parallelCopies": 12
						},
						"inputs": [
							{
								"referenceName": "MurexDB_dev",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureBlobDatasetAvro",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MurexDB_dev')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobDatasetAvro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromMurexDB_4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBigTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "M_HOUR",
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 12
						},
						"inputs": [
							{
								"referenceName": "MurexDB_dev",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MurexDB_dev')]",
				"[concat(variables('factoryId'), '/datasets/Parquet1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaCopyFromBlobPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_73c",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source/@{formatDateTime(pipeline().parameters.windowStart,'yy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/@{formatDateTime(pipeline().parameters.windowStart,'HH')}/"
							},
							{
								"name": "Destination",
								"value": "destination/@{formatDateTime(pipeline().parameters.windowStart,'yy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/@{formatDateTime(pipeline().parameters.windowStart,'HH')}/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_73c",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/@{formatDateTime(pipeline().parameters.windowStart,'HH')}"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_73c",
								"type": "DatasetReference",
								"parameters": {
									"cw_folderPath": "@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/@{formatDateTime(pipeline().parameters.windowStart,'dd')}/@{formatDateTime(pipeline().parameters.windowStart,'HH')}"
								}
							}
						]
					}
				],
				"parameters": {
					"windowStart": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_73c')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_73c')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ESI13T_Extraction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetTableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "Select OBJECT_NAME \nFROM ALL_OBJECTS \nWHERE OBJECT_NAME IN (\n'ATEL_ACCOUNTSELECTION'\n,'ATEL_BOOKSTRUCTURE'\n,'ATEL_POSTINGPARAMETER'\n,'SDKCLIENTS'\n,'SDKCURRENCIES'\n,'SDKDETAILSCOPES'\n,'SDKLOVS'\n,'SDKLOVVALUES'\n,'SDKMATURITYRULES'\n,'SDKSYSTEMPARAMETERS'\n,'SDKUNITS'\n,'SDKUSERLOVVALUES'\n,'SDKUSERS'\n,'SD_ANLAGEN'\n,'SD_ANLAGENTYPEN'\n,'SD_ANSCHRIFTEN'\n,'SD_BELEGTYPEN'\n,'SD_BILLMARKET'\n,'SD_BUSINESSAREAS'\n,'SD_DETAILPROPERTIES'\n,'SD_DETAILS'\n,'SD_DETAILTYPES'\n,'SD_DOMAINWERTE'\n,'SD_FIBU'\n,'SD_HOLIDAYS'\n,'SD_HOLIDAYZONE'\n,'SD_KONTAKTE'\n,'SD_KUNDEN'\n,'SD_LOVVALUE'\n,'SD_MANDANTEN'\n,'SD_PERSONEN'\n,'SD_POSTINGTYPE'\n,'SD_RECHNUNGEN'\n,'SD_RECHNUNGSPOS'\n,'SD_TAXCODE'\n,'SD_TRADECONTRACT'\n,'SD_TRADECONTRACTDET'\n,'SD_USER'\n,'SD_VERTRAEGE'\n,'SD_VERTRAGSGRUPPEN'\n,'SD_VERTRAGSTYPEN'\n,'SD_WAEHRUNGEN'\n,'ALPIQ_SCHEDULE_MAPPING'\n) \nAND OWNER = 'PS_ADMIN'",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ESI13T_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "ALL_OBJECTS",
									"SchemaName": "PUBLIC"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTableInList",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('GetTableList').output.value)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyTableToParquet_TEMP",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('Select * from ', item().OBJECT_NAME, ' where rownum < 5000')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"dataIntegrationUnits": 2,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ESI13T_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().OBJECT_NAME",
													"type": "Expression"
												},
												"SchemaName": "PS_ADMIN"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TMP_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"Folder": "TMP"
											}
										}
									]
								},
								{
									"name": "ParquetSplitAvro",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "CopyTableToParquet_TEMP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "ParquetSplitAvro",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"StagedParquet": {
													"Folder": {
														"value": "@concat('ParquetSplit/',utcnow())",
														"type": "Expression"
													}
												},
												"DataExtractionSinkAvro": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ExtractionTimestamp": {
						"type": "string",
						"defaultValue": "utcnow('yyyy-MM-dd HH-mm-ss')"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ESI13T_Dynamic')]",
				"[concat(variables('factoryId'), '/datasets/TMP_Parquet')]",
				"[concat(variables('factoryId'), '/dataflows/ParquetSplitAvro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ESI13T_Stage_SD_RECHNUNGSPOS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_SD_RECHNUNGSPOS_Parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ESI13T_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "SD_RECHNUNGSPOS",
									"SchemaName": "PS_ADMIN"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DataExtraction_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@concat('CopyParquet/',utcnow())",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ESI13T_Dynamic')]",
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ET51Q_PARAMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ET51Q",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from ET3000.PROGFP_ID\nwhere trunc(last_update) > to_date('2020-07-07 16-00-00', 'YYYY-MM-DD HH24-MI-SS') and trunc(last_update) <= to_date('2020-07-08 16-00-00', 'YYYY-MM-DD HH24-MI-SS')",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"culture": "en-us"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ET51Q_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "PROGFP_ID",
									"SchemaName": "ET3000"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TMP_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"Folder": "ET51Q"
								}
							}
						]
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ET51Q_Dynamic')]",
				"[concat(variables('factoryId'), '/datasets/TMP_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ET51Q_SpecialCols')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat(\n'SELECT \nCOLUMN_NAME\n, DATA_TYPE\n, DATA_TYPE_MOD\n, DATA_TYPE_OWNER\n, DATA_LENGTH\n, DATA_PRECISION\n, DATA_SCALE\n, NULLABLE\n, COLUMN_ID\n, DEFAULT_LENGTH\n, DATA_DEFAULT\n, CHARACTER_SET_NAME\n, CHAR_COL_DECL_LENGTH\n, QUALIFIED_COL_NAME\nFROM ALL_TAB_COLS\nWHERE \nCOLUMN_NAME NOT LIKE(''','SYS_%',''') AND\nTABLE_NAME =''',\nvariables('table')\n, ''' '\n)",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ET51Q_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('table')",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@variables('schema')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "HTTPmapper",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HTTPmapper",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ERSMetadataFunctionsAPP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy without column renaming",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('SELECT * FROM ',variables('schema'),'.',variables('table'), ' WHERE ROWNUM < 101')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ET51Q_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('table')",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@variables('schema')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DataExtraction_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@concat('SpecialColTest/Plain/',formatDateTime(utcnow(),'yyyy-MM-dd HH-mm'))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "VariableViewCreationChanged",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "VariableViewCreator",
							"method": "POST",
							"headers": {
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('table')",
									"type": "Expression"
								},
								"host": "ET51Q",
								"plain": "yes"
							},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ERSMetadataFunctionsAPP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy with column renaming",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "HTTPmapper",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('SELECT * FROM ',variables('schema'),'.',variables('table'), ' WHERE ROWNUM < 101')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"value": "@activity('HTTPmapper').output",
								"type": "Expression"
							}
						},
						"inputs": [
							{
								"referenceName": "ET51Q_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('table')",
										"type": "Expression"
									},
									"SchemaName": {
										"value": "@variables('schema')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DataExtraction_Parquet",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@concat('SpecialColTest/Modified/',formatDateTime(utcnow(),'yyyy-MM-dd HH-mm'))",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "VariableViewCreationPlain",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "VariableViewCreator",
							"method": "POST",
							"headers": {
								"schema": {
									"value": "@variables('schema')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('table')",
									"type": "Expression"
								},
								"host": "ET51Q",
								"plain": "yes"
							},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ERSMetadataFunctionsAPP",
							"type": "LinkedServiceReference"
						}
					}
				],
				"variables": {
					"schema": {
						"type": "String",
						"defaultValue": "ET3000"
					},
					"table": {
						"type": "String",
						"defaultValue": "PROGFP_ID"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ET51Q_Dynamic')]",
				"[concat(variables('factoryId'), '/linkedServices/ERSMetadataFunctionsAPP')]",
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ParquetSplitAvro",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParquetSplitAvro",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagedParquet": {
										"Folder": {
											"value": "@concat('ParquetSplit/',utcnow())",
											"type": "Expression"
										}
									},
									"DataExtractionSinkAvro": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParquetSplitAvro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FunctionsTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "HTTPSample",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HTTPSample",
							"method": "POST",
							"headers": {
								"name": "John"
							},
							"body": {
								"name": "Bob"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "WebHook1",
						"type": "WebHook",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"url": "https://ersmetadataprocessingpoc.azurewebsites.net/api/HTTPSample?code=yRZ5U2LHD4GhnNznBIL5f4JEhWhFkZDa4Th6HDiLalfYxQpmGjZowQ==&name=Bob",
							"method": "POST",
							"headers": {
								"name": "Bob"
							},
							"body": {
								"value": "test"
							},
							"timeout": "00:10:00",
							"reportStatusOnCallBack": true
						}
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetTableListAndTriggerCopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTableList",
						"description": "Retrieve the table list from Azure SQL database ",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA, TABLE_NAME FROM information_schema.TABLES WHERE TABLE_TYPE = 'BASE TABLE' and TABLE_SCHEMA = 'SalesLT' and TABLE_NAME <> 'ProductModel'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlDatabaseDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TriggerCopy",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IterateAndCopySQLTable",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {
								"tableList": {
									"value": "@activity('LookupTableList').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseDataset')]",
				"[concat(variables('factoryId'), '/pipelines/IterateAndCopySQLTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalCopyPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SinkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabaseLinkedService001",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkTable')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IterateAndCopySQLTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IterateSQLTables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.tableList",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "Tablename",
													"value": {
														"value": "@item().TABLE_NAME",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "SELECT * FROM [@{item().TABLE_SCHEMA}].[@{item().TABLE_NAME}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AvroSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "AvroWriteSettings",
												"quoteAllText": true
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "AzureSqlDatabaseDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureBlobDatasetAvro",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"tableList": {
						"type": "array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlDatabaseDataset')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobDatasetAvro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MX01_EXP_HR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetGroupCount",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "extractionTimestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select ceil((select count(*) from ',variables('tableName'),')/8000000) as group_no from dual')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "MX01_MXDM_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"db_schema": "MX_DATAMART",
									"db_table": {
										"value": "@variables('tableName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "NumberOfSCNGroups",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetGroupCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "numberOfGroups",
							"value": {
								"value": "@string(activity('GetGroupCount').output.firstRow.GROUP_NO)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetGroupSCN",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "NumberOfSCNGroups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select\nCASE\n  WHEN grp_nbr = 1\n  THEN min(ora_rowscn)\n  WHEN grp_nbr > 1\n  THEN min(ora_rowscn) +1\n  END as Starting_Value\n, max(ora_rowscn) as Ending_Value\n, count(*)        as Total_Records\n, grp_nbr         as Group_Nbr\nfrom (\nselect ora_rowscn,\nntile(',variables('numberOfGroups') ,') over (order by ora_rowscn) grp_nbr\nfrom ',variables('tableName') ,'\n)\ngroup by grp_nbr\nORDER BY grp_nbr ASC')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "MX01_MXDM_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"db_schema": "MX_DATAMART",
									"db_table": {
										"value": "@variables('tableName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachGroup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetGroupSCN",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetGroupSCN').output.value",
								"type": "Expression"
							},
							"batchCount": 16,
							"activities": [
								{
									"name": "CopySCNGroup",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('SELECT /*+ NO_PARALLEL(\"', variables('tableName'),'\") */  * FROM ',variables('tableName'),' WHERE ORA_ROWSCN BETWEEN ', item().STARTING_VALUE, ' AND ',item().ENDING_VALUE)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "MX01_MXDM_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"db_schema": "MX_DATAMART",
												"db_table": {
													"value": "@variables('tableName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataExtraction_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat('ORACLE/MX01/MX_DATAMART/',variables('tableName'),'/',variables('extractionTimestamp'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "extractionTimestamp",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "extractionTimestamp",
							"value": {
								"value": "@formatDateTime(utcnow(),'yyyy-MM-dd HH-mm-ss')",
								"type": "Expression"
							}
						}
					}
				],
				"variables": {
					"numberOfGroups": {
						"type": "String"
					},
					"tableName": {
						"type": "String",
						"defaultValue": "ALPIQ_DLT_EXP_HR_REP"
					},
					"extractionTimestamp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MX01_MXDM_Dynamic')]",
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MX01_MXMD_SMALL_TABLES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup - 3 Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Timestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select OBJECT_NAME from ALL_OBJECTS WHERE OBJECT_NAME IN(\n'ALPIQ_LOCATION_COUNTRY_VIEW'\n,'V_STRATEGY_TREE_DBF'\n,'V_TRN_FLAGS_DBF'\n)",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "MX01_MXDM_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"db_schema": {
										"value": "@variables('db_schema')",
										"type": "Expression"
									},
									"db_table": "ALL_OBJECTS"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup - 3 Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('Lookup - 3 Tables').output.value)",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "Copy2Parquet_plain",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 2
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "MX01_MXDM_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"db_schema": {
													"value": "@variables('db_schema')",
													"type": "Expression"
												},
												"db_table": {
													"value": "@item().OBJECT_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataExtraction_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat('ORACLE/',variables('db_host'),'/',variables('db_schema'),'/',item().OBJECT_NAME,'/',variables('extraction_timestamp'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup - 15 Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Timestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select OBJECT_NAME from ALL_OBJECTS WHERE OBJECT_NAME IN (\n'ALPIQ_MASTER_AGR_REP'\n,'ALPIQ_SIM_PURGED_REP'\n,'ALPIQ_SIM_STOCK_REP'\n,'ATEL_CMAT_REP'\n,'ATEL_CS_ACTUALS_REP'\n,'ATEL_CS_FORECAST_REP'\n,'ATEL_MDL_FX_REP'\n,'ATEL_OPTIONS_REP'\n,'ATEL_SIM_OPT_GRK_REP'\n,'ATEL_SQL_CNTP_REP'\n,'ATEL_SQL_FEE_REP'\n,'ATEL_SQL_INDEX_REP'\n,'ATEL_SQL_PFTREE_REP'\n,'ATEL_SQL_PF_REP'\n,'ATEL_SQL_PR_IND_REP'\n)",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "MX01_MXDM_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"db_schema": {
										"value": "@variables('db_schema')",
										"type": "Expression"
									},
									"db_table": "ALL_OBJECTS"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach2",
						"description": "",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup - 15 Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('Lookup - 15 Tables').output.value)",
								"type": "Expression"
							},
							"batchCount": 2,
							"activities": [
								{
									"name": "Copy2Parquet_whereTimestamp",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "refvalue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('SELECT * from ', variables('db_schema'), '.', item().OBJECT_NAME, ' where m_ref_data in (select d.m_ref_data from DYN_AUDIT_REP d, JOB_AUDIT_REP j where d.m_idjob=j.m_mx_ref_job and d.M_DELETED  = ''N'' and j.M_STATUS in  (''Done'',''Corrected'') and  to_char(to_date(TO_CHAR (d.M_DATEGEN, ''DDMMYYYY'')|| ''_''|| TO_CHAR (d.M_TIMEGEN),''DDMMYYYY SSSSS''),''YYYY-MM-DD HH24-MI-SS'') >', '''',variables('refvalue'),  '''', ' and  to_char(to_date(TO_CHAR (d.M_DATEGEN, ''DDMMYYYY'')|| ''_''|| TO_CHAR (d.M_TIMEGEN),''DDMMYYYY SSSSS''),''YYYY-MM-DD HH24-MI-SS'') <= ', '''', variables('extraction_timestamp'),''')')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 2
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "MX01_MXDM_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"db_schema": {
													"value": "@variables('db_schema')",
													"type": "Expression"
												},
												"db_table": {
													"value": "@item().OBJECT_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataExtraction_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat('ORACLE/',variables('db_host'),'/',variables('db_schema'),'/',item().OBJECT_NAME,'/',variables('extraction_timestamp'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "refvalue",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "refvalue",
										"value": "20200803 000000"
									}
								}
							]
						}
					},
					{
						"name": "Set Timestamp",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "extraction_timestamp",
							"value": {
								"value": "@formatDateTime(utcnow(),'yyyy-MM-dd HH-mm-ss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup - 1 Table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Timestamp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select OBJECT_NAME from ALL_OBJECTS WHERE OBJECT_NAME IN (\n'ALPIQ_CMIP_EXPORT'\n)",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "MX01_MXDM_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"db_schema": {
										"value": "@variables('db_schema')",
										"type": "Expression"
									},
									"db_table": "ALL_OBJECTS"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach3",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup - 1 Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@array(activity('Lookup - 1 Table').output.value)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy2Parquet_whereClosing",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "refvalue_closing",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('SELECT * from ', variables('db_schema'), '.', item().OBJECT_NAME, ' where closing_date > to_date(''', string(variables('refvalueClosing')),''',''DD.MM.YYYY'')')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 2
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "MX01_MXDM_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"db_schema": {
													"value": "@variables('db_schema')",
													"type": "Expression"
												},
												"db_table": {
													"value": "@item().OBJECT_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataExtraction_Parquet",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat('ORACLE/',variables('db_host'),'/',variables('db_schema'),'/',item().OBJECT_NAME,'/',variables('extraction_timestamp'))",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "refvalue_closing",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "refvalueClosing",
										"value": "02.08.2020"
									}
								}
							]
						}
					}
				],
				"variables": {
					"db_host": {
						"type": "String",
						"defaultValue": "MX01"
					},
					"db_schema": {
						"type": "String",
						"defaultValue": "MX_DATAMART"
					},
					"extraction_timestamp": {
						"type": "String"
					},
					"refvalue": {
						"type": "String"
					},
					"refvalueClosing": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MX01_MXDM_Dynamic')]",
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MinuteDataProc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MinuteLogsProc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MurexDB_ComplexWhereClause')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TestWhereClause",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSQLCustomer": {},
									"AzureSQLCustAddr": {},
									"SinkToBlob": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TestWhereClause')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSIS-HelloWorld')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute SSIS HelloWorld",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "HelloWorld1/HelloWorld/Package.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "SSIS-IR",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SSIS-IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSISTestAmine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ExecuteLocalIncrement",
						"type": "ExecuteSSISPackage",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "AmineTest/AzureSSISTest/LocalOperation.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "SSIS-IR",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"mydptest001": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					},
					{
						"name": "LoadCMDServersFromAWS",
						"type": "ExecuteSSISPackage",
						"dependsOn": [
							{
								"activity": "ExecuteLocalIncrement",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"packageLocation": {
								"packagePath": "AmineTest/AzureSSISTest/GetServersFromAWS.dtsx",
								"type": "SSISDB"
							},
							"environmentPath": null,
							"connectVia": {
								"referenceName": "SSIS-IR",
								"type": "IntegrationRuntimeReference"
							},
							"loggingLevel": "Basic",
							"projectConnectionManagers": {},
							"packageConnectionManagers": {
								"cmdb.cluster-cyiesepjpd3o.eu-central-1.rds.amazonaws.com.CMDB.ev_user": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								},
								"mydptest001": {
									"Password": {
										"value": {
											"type": "SecureString",
											"value": "**********"
										}
									}
								}
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SSIS-IR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake insert statement test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Insert into Test",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "SnowflakeTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SnowflakeTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceMetadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat(\n'SELECT \nCOLUMN_NAME\n, DATA_TYPE\n, DATA_TYPE_MOD\n, DATA_TYPE_OWNER\n, DATA_LENGTH\n, DATA_PRECISION\n, DATA_SCALE\n, NULLABLE\n, COLUMN_ID\n, DEFAULT_LENGTH\n, DATA_DEFAULT\n, CHARACTER_SET_NAME\n, CHAR_COL_DECL_LENGTH\n, QUALIFIED_COL_NAME\nFROM ALL_TAB_COLS\nWHERE TABLE_NAME =''',\npipeline().parameters.TableName\n, ''' '\n)",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "ESI13T_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"SchemaName": "PS_ADMIN"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Anonymus",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HTTP_Parse_Mapping",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ERSMetadataFunctionsAPP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "FunctionLevel",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "5 Seconds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HTTP_Snowflake_Statement_Parser",
							"method": "POST",
							"headers": {
								"schema": "PS_ADMIN",
								"host": "ESI13T",
								"table": {
									"value": "@pipeline().parameters.TableName",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ERSMetadataFunctionsAPP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "HostLevel",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "10 Seconds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HTTP_Parse",
							"method": "POST",
							"headers": {
								"schema": "PS_ADMIN",
								"host": "ESI13T",
								"table": {
									"value": "@pipeline().parameters.TableName",
									"type": "Expression"
								}
							},
							"body": {
								"value": "@activity('Lookup1').output",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ERSMetadataFunctionsAPP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "5 Seconds",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					},
					{
						"name": "10 Seconds",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ESI13T_Dynamic')]",
				"[concat(variables('factoryId'), '/linkedServices/ERSMetadataFunctionsAPP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SplitSingleParquetFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ParquetSplitParquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ParquetSplitParquet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ParquetSingleFile": {
										"folder": "ParquetSingleFile"
									},
									"ParquetSplitted": {
										"folder": {
											"value": "@concat('ParquetSplit/',utcnow())",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ParquetSplitParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMPBlobCleanup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeleteFiles",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "TMP_DEL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorageDataExtraction",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					}
				],
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TMP_DEL')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestAzureFunction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "HttpTrigger1",
							"method": "POST",
							"headers": {},
							"body": {
								"name": "Azure"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction2",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AWS_S3_Datalake_BI_tst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AWS_S3_Snowflake_ComplexDataTypes",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AmazonS3Location",
						"bucketName": "tst-alpiq-datalake-bi",
						"folderPath": "ORACLE/MX01/MX_DATAMART/ALPIQ_DLT_EXP_HR_REP/2020-06-08 08-20-48"
					},
					"avroCompressionCodec": "snappy"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AWS_S3_Snowflake_ComplexDataTypes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Avro1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMurexDBV2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "murexdbv2"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMurexDBV2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "targetfolder",
						"container": "exportfromsql"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobDatasetAvro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMurexDBV2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "murexdbv2avro"
					},
					"avroCompressionCodec": "snappy"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMurexDBV2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobDatasetWhereTest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "wheretestfolder",
						"container": "exportfromsql"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBloblDatasetV2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMurexDBV2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "murexdbv2"
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"compressionLevel": "Fastest",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMurexDBV2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "dbo.dummyName"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCustAddress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cust_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "street",
						"type": "varchar"
					},
					{
						"name": "num",
						"type": "varchar"
					},
					{
						"name": "zip",
						"type": "int",
						"precision": 10
					},
					{
						"name": "city",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cust_address"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "surname",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobSinkComplexDataTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceSystem": {
						"type": "string",
						"defaultValue": "ORACLE"
					},
					"DB_Name": {
						"type": "string",
						"defaultValue": "MX09"
					},
					"Schema_Name": {
						"type": "string",
						"defaultValue": "MX_DATAMART"
					},
					"Table_Name": {
						"type": "string",
						"defaultValue": "TST_DATA_TYPES"
					},
					"Extraction_Timestamp": {
						"type": "string"
					},
					"Bucket": {
						"type": "string",
						"defaultValue": "tst-alpiq-datalake-bi"
					}
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(dataset().SourceSystem,'/',dataset().DB_Name,'/',dataset().Schema_Name,'/',dataset().Table_Name,'/',dataset().Extraction_Timestamp)",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Bucket",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataExtraction_Avro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "EXP_HR_S3",
						"container": "data-extraction-poc"
					},
					"avroCompressionCodec": "snappy"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataExtraction_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": "data-extraction-poc"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_73c')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "destination"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_b66')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "destination"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ESI13T_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ESI13T_BUSINESSOBJECTS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ESI13T_BUSINESSOBJECTS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ET51Q_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ET51Q_BUSINESSOBJECTS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ET51Q_BUSINESSOBJECTS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MX01_MXDM_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MX01_MX_DATAMART",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"db_schema": {
						"type": "string"
					},
					"db_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().db_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().db_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MX01_MX_DATAMART')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MurexDBBlobCsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMurexDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "murexdb"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMurexDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MurexDBBlobCsv_2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMurexDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "double_activity",
						"container": "murexdb"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMurexDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MurexDB_ComplexDataTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "MX_DATAMART",
					"table": "TST_DATA_TYPES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MurexDB_dev')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "MX_DATAMART",
					"table": "ALPIQ_DLT_EXP_HR_REP"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySQLCMDBServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MySQLCMDBServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageMurexDBV2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "murexdbv2parquet"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageMurexDBV2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PlainDump_Avro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Destination"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "ET51Q",
						"container": "data-extraction-poc"
					},
					"avroCompressionCodec": "snappy"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/S3SinkComplexDataTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AWS_S3_Snowflake_ComplexDataTypes",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceSystem": {
						"type": "string"
					},
					"DB_Name": {
						"type": "string"
					},
					"Schema_Name": {
						"type": "string"
					},
					"Table_Name": {
						"type": "string"
					},
					"Extraction_Timestamp": {
						"type": "string"
					},
					"Bucket": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AmazonS3Location",
						"bucketName": {
							"value": "@dataset().Bucket",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat(dataset().SourceSystem,'/',dataset().DB_Name,'/',dataset().Schema_Name,'/',dataset().Table_Name,'/',dataset().Extraction_Timestamp)",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AWS_S3_Snowflake_ComplexDataTypes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/S3_Copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "S3-Copy",
						"container": "data-extraction-poc"
					},
					"avroCompressionCodec": "snappy"
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureStorageLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@CONCAT('Incremental-', pipeline().RunId, '.txt')",
							"type": "Expression"
						},
						"folderPath": "incrementalcopy",
						"container": "deltamigration"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureStorageLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SnowflakeTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Snowflake1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": "SHARED",
					"table": "TEST"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Snowflake1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "data_source_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_73c')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_folderPath": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().cw_folderPath",
							"type": "Expression"
						},
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Staged_Parquet_ESI13T_SD_RECHNUNGSPOS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "ORACLE/ESI13T/PS_ADMIN/SD_RECHNUNGSPOS/2020-06-29 09-30-00",
						"container": "data-extraction-poc"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "REP_BETRAG",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FIBLFDNR_H",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FIBLFDNR_S",
						"type": "DOUBLE"
					},
					{
						"name": "REP_ID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_KZ",
						"type": "INT96"
					},
					{
						"name": "REP_LDATE",
						"type": "INT96"
					},
					{
						"name": "REP_MANID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_MAS_DOWID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_MENGE",
						"type": "DOUBLE"
					},
					{
						"name": "REP_RABATT1",
						"type": "DOUBLE"
					},
					{
						"name": "REP_RECID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_SH",
						"type": "UTF8"
					},
					{
						"name": "REP_USEID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_ABLDAT",
						"type": "INT96"
					},
					{
						"name": "REP_ABLID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_ABRBIS",
						"type": "INT96"
					},
					{
						"name": "REP_ABRVON",
						"type": "INT96"
					},
					{
						"name": "REP_BEZ",
						"type": "UTF8"
					},
					{
						"name": "REP_AUF_DPCID_H",
						"type": "UTF8"
					},
					{
						"name": "REP_KST_DPCID_H",
						"type": "UTF8"
					},
					{
						"name": "REP_PC_DPCID_H",
						"type": "UTF8"
					},
					{
						"name": "REP_PSP_DPCID_H",
						"type": "UTF8"
					},
					{
						"name": "REP_AUF_DPCID_S",
						"type": "UTF8"
					},
					{
						"name": "REP_KST_DPCID_S",
						"type": "UTF8"
					},
					{
						"name": "REP_PC_DPCID_S",
						"type": "UTF8"
					},
					{
						"name": "REP_PSP_DPCID_S",
						"type": "UTF8"
					},
					{
						"name": "REP_EINGABEREQ",
						"type": "UTF8"
					},
					{
						"name": "REP_FIBLFDNR_H_MWST",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FIBLFDNR_S_MWST",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FIBU_PRSID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FIXIERT",
						"type": "UTF8"
					},
					{
						"name": "REP_FREIVERBR",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FREMD_BETRAG",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FREMD_WAEID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_GERID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_KONSTANTE",
						"type": "DOUBLE"
					},
					{
						"name": "REP_MENGERECH",
						"type": "UTF8"
					},
					{
						"name": "REP_MULTIPLIKATOR",
						"type": "DOUBLE"
					},
					{
						"name": "REP_NORMFAKTOR",
						"type": "DOUBLE"
					},
					{
						"name": "REP_SORTNR",
						"type": "DOUBLE"
					},
					{
						"name": "REP_STAND",
						"type": "DOUBLE"
					},
					{
						"name": "REP_STORNOFLAG_OLD",
						"type": "UTF8"
					},
					{
						"name": "REP_TARID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_UEBID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_URMENGE",
						"type": "DOUBLE"
					},
					{
						"name": "REP_VABLDAT",
						"type": "INT96"
					},
					{
						"name": "REP_VKNID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_VSTAND",
						"type": "DOUBLE"
					},
					{
						"name": "REP_GRUPPEN_REPID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_NOFMAS_DOWID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_BIMID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_KTPID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_MECID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_TCOID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_PTYID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FREMDNR",
						"type": "UTF8"
					},
					{
						"name": "REP_POSTYPE",
						"type": "UTF8"
					},
					{
						"name": "REP_CDEID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_VETID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_DET_INTID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_NETTO",
						"type": "DOUBLE"
					},
					{
						"name": "REP_FREMD_NETTO",
						"type": "DOUBLE"
					},
					{
						"name": "REP_UR_MAS_DOWID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_AMOUNTUNITCODE",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "REP_DURATION",
						"type": "DOUBLE"
					},
					{
						"name": "REP_DURATIONUNITCODE",
						"type": "DECIMAL",
						"precision": 38,
						"scale": 18
					},
					{
						"name": "REP_ARTID",
						"type": "DOUBLE"
					},
					{
						"name": "REP_REFERENCE",
						"type": "UTF8"
					},
					{
						"name": "REP_TAPIDENTIFIER",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMP_DEL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "SpecialColTest",
						"container": "data-extraction-poc"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "ACCOUNTTYPE",
						"type": "UTF8"
					},
					{
						"name": "INVOICETYPENO",
						"type": "DOUBLE"
					},
					{
						"name": "ACCOUNTINGTYPE",
						"type": "UTF8"
					},
					{
						"name": "CANCELLATION",
						"type": "UTF8"
					},
					{
						"name": "INVOICETYPE",
						"type": "UTF8"
					},
					{
						"name": "POSTINGSYMBOLDEBIT",
						"type": "UTF8"
					},
					{
						"name": "POSTINGKEYDEBIT",
						"type": "DOUBLE"
					},
					{
						"name": "POSTINGSYMBOLCREDIT",
						"type": "UTF8"
					},
					{
						"name": "POSTINGKEYCREDIT",
						"type": "DOUBLE"
					},
					{
						"name": "REPLACETAXCODE",
						"type": "UTF8"
					},
					{
						"name": "CLIENT",
						"type": "UTF8"
					},
					{
						"name": "LMDATE",
						"type": "INT96"
					},
					{
						"name": "LMUSEID",
						"type": "DOUBLE"
					},
					{
						"name": "EDATE",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMP_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorageDataExtraction",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ERSExtractionJobTesting/Source"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": "data-extraction-poc"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorageDataExtraction')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseLinkedService001",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseLinkedService001')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AWS_S3_Snowflake_ComplexDataTypes')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AmazonS3",
				"typeProperties": {
					"serviceUrl": "",
					"accessKeyId": "[parameters('AWS_S3_Snowflake_ComplexDataTypes_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "SecureString",
						"value": "[parameters('AWS_S3_Snowflake_ComplexDataTypes_secretAccessKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageDataExtraction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageDataExtraction_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageMurexDB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageMurexDB_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorageMurexDBV2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorageMurexDBV2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction1_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction1_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction2_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction2_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseLinkedService001')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseLinkedService001_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureStorageLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureStorageLinkedService_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CORPDIR2T')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('CORPDIR2T_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-Fujitsu",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-Fujitsu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ERSMetadataFunctionsAPP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('ERSMetadataFunctionsAPP_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('ERSMetadataFunctionsAPP_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ESI13T_BUSINESSOBJECTS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ESI13T Connection with the BUSINESSOBJECTS user",
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('ESI13T_BUSINESSOBJECTS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-Fujitsu",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-Fujitsu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ET51Q_BUSINESSOBJECTS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ET51Q DB Connection for the BUSINESSOBJECTS user",
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('ET51Q_BUSINESSOBJECTS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-Fujitsu",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-Fujitsu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MX01_MX_DATAMART')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('MX01_MX_DATAMART_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-Fujitsu",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-Fujitsu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MySQLCMDBServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySQLCMDBServer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "IR-Fujitsu",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-Fujitsu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Snowflake1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Snowflake",
				"typeProperties": {
					"connectionString": "[parameters('Snowflake1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MinDataTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "MinuteDataProc",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2020-05-22T10:36:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "TumblingWindowTriggerDependencyReference",
							"referenceTrigger": {
								"referenceName": "MinLogsTrigger",
								"type": "TriggerReference"
							}
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MinuteDataProc')]",
				"[concat(variables('factoryId'), '/triggers/MinLogsTrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MinLogsTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "MinuteLogsProc",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2020-05-22T10:36:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MinuteLogsProc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scheduler')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "GetTableListAndTriggerCopyData",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2020-05-19T11:06:00Z",
						"endTime": "2020-05-19T15:06:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/GetTableListAndTriggerCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MX01_MXMD_SMALL_TABLES",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2020-08-10T14:45:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MX01_MXMD_SMALL_TABLES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerTestPipeline')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SourceMetadata",
							"type": "PipelineReference"
						},
						"parameters": {
							"TableName": "[parameters('TriggerTestPipeline_properties_SourceMetadata_parameters_TableName')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 15,
						"startTime": "2020-08-11T07:28:00.000Z",
						"endTime": "2020-08-11T17:00:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SourceMetadata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_73c')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "DeltaCopyFromBlobPipeline",
						"type": "PipelineReference"
					},
					"parameters": {
						"windowStart": "[parameters('Trigger_73c_properties_pipeline_parameters_windowStart')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2020-06-20T12:43:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DeltaCopyFromBlobPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_b66')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 1,
					"startTime": "2020-06-20T12:30:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-Fujitsu')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "test BI use cases",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSIS-IR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "To run SSIS packages",
				"typeProperties": {
					"computeProperties": {
						"location": "West Europe",
						"nodeSize": "Standard_E2_v3",
						"numberOfNodes": 1,
						"maxParallelExecutionsPerNode": 2,
						"vNetProperties": {
							"vNetId": "/subscriptions/e42fcc82-230e-495a-bb19-52f7ab4c9ad2/resourceGroups/DataPipelineTest001/providers/Microsoft.Network/virtualNetworks/adfvnet",
							"subnet": "OnPremWith"
						}
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('SSIS-IR_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('SSIS-IR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('SSIS-IR_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "Basic"
						},
						"edition": "Standard",
						"licenseType": "LicenseIncluded"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CombineAvroFiles')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataExtraction_Avro",
								"type": "DatasetReference"
							},
							"name": "S3Dump"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataExtraction_Parquet",
								"type": "DatasetReference"
							},
							"name": "ParquetGeneralization"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\twildcardPaths:['EXP_HR_S3/*.avro'],\n\tpartitionBy('hash', 1)) ~> S3Dump\nS3Dump sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:['ALPIQ_DLT_EXP_HR_REP_20200703181006.parquet'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ParquetGeneralization"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Avro')]",
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetSplitAvro')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TMP_Parquet",
								"type": "DatasetReference"
							},
							"name": "StagedParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataExtraction_Avro",
								"type": "DatasetReference"
							},
							"name": "DataExtractionSinkAvro"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> StagedParquet\nStagedParquet sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('roundRobin', 10),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DataExtractionSinkAvro"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TMP_Parquet')]",
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Avro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetSplitParquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ERSExtractionJobTesting"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataExtraction_Parquet",
								"type": "DatasetReference"
							},
							"name": "ParquetSingleFile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataExtraction_Parquet",
								"type": "DatasetReference"
							},
							"name": "ParquetSplitted"
						}
					],
					"transformations": [],
					"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpurgeFiles: true,\n\tformat: 'parquet') ~> ParquetSingleFile\nParquetSingleFile sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionBy('roundRobin', 25),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ParquetSplitted"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataExtraction_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestWhereClause')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCustomer",
								"type": "DatasetReference"
							},
							"name": "AzureSQLCustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableCustAddress",
								"type": "DatasetReference"
							},
							"name": "AzureSQLCustAddr"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureBlobDatasetWhereTest",
								"type": "DatasetReference"
							},
							"name": "SinkToBlob"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tname as string,\n\t\tsurname as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSQLCustomer\nsource(output(\n\t\tcust_id as integer,\n\t\tstreet as string,\n\t\tnum as string,\n\t\tzip as integer,\n\t\tcity as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSQLCustAddr\nAzureSQLCustomer, AzureSQLCustAddr join(id == cust_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkToBlob"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCustomer')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCustAddress')]",
				"[concat(variables('factoryId'), '/datasets/AzureBlobDatasetWhereTest')]"
			]
		}
	]
}